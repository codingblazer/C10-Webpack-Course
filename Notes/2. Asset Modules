Asset module is new feature introduced in webpack 5. You can directly use assets like images, plain text files, fonts file in your javascript file by importing them but in your webpack config, you have to teach it how to import this type of dependency. 

4 type of asset modules:

1. asset/resouce => in this webpack places your image directly inside the output folder and the path to this file is exposed to the use of this asset by webpack to use this. This is used for large files.
2. asset/inline => This is used for small files like svg files and webpack exposes this as a URI which can be used to use this asset. This will not create asset file inside the output folder but directly use the asset by bundling it inside the js in base64 string of the file content and use it. This can be done for large files but that will make your js file bundle very big.
3. asset => general type that you can give and webpack will choose between 1 and 2 based on file size => file > 8kb will be 1 and otherwise 2.
4. asset/source => useful when dealing with text files => webpack takes the data from the asset and injects into the js file as it is in string format. 

Now we will first add image kiwi in src folder => Now see add-image.js where we write function to add image to DOM. Now if you see src of image, though it takes path, url or URI, we have given the image itself by importing that file. Now we have to teach webpack that this file type if imported, consider it is a assetType specified and thus store image like you would do for that assetType and convert any such import of this image by substituting path/uri of that image in src tag automatically. 

So we are calling this addImage function inside the index.js => See webpack config => There are 2 module types => asset module which we are covering here and loader which we will cover next => it takes an object where we specify rules array => each rule should have atleast 2 props => 'test' => we give regex to match the file type for which this rule should be applied => second prop is 'type' or 'use' => for asset modules, we have to specify type only => this is assetType => We will take asset/resource type for this => So everytime webpack imports a file, it checks if it knows it like typescript or javascript, json files. If it don't, it checks if there is rule for it. If not, it throws error that it does not know how to import this file and what to do with this file. 

Also since the asset type is asset/resource, this file will be copied inside dist folder but with name which is md5 hash of the content of the file. 
---------------------------------------------------------------------------------------------------------------------------------------------
publicPath property => public path is additional option which tells webapp where to get the generated file from, when the import is used. Now all webpack is doing when we specify the assetType and test is, how to bundle these type of matching regex file. Now next thing webpack does is, any such import is replaced by publicpath/filename where filename is name of the file it bundled as per the rule. 

Now in src of image, the src will be 'publicpath/filename'  => Now in webpack5 only, publicPath value is set based on assetType and thus for this it is set to 'dist/' and thus src will become 'dist/filename' which is fine and it will work.

Now in webpack4, the default value of publicPath was '' and thus if not given value explicitly as 'dist/' by you, it would have taken src="publicPath/generatedfileName" => src = "generatedFileName" and it would not work. 

Now like in hercule project, we are copying the assets generated by webpack inside dist to cdn and then in our vue using that cdn to get images. Thus, in such cases, the publicPath should be set to cdn url and '/generatedFileName' will be appended to it and src will work by getting image from cdn. 
-----------------------------------------------------------------------------------------------------------------------------------------------
assetInline type demo => try changing the asset/resource to asset/inline in webpack for the same thing and do build and you will see in build logs that js bundle size become very large around 2.5 mb => => if you see the js file, you will see it exporting very large string starting with base64 which is content of our image. Now if you open html it will work just fine and if you see the src tag of image by inspecting, you will see that it contains that very very long string of base64 representation which is being provided as an URI to src.

Now this type of thing is very useful for small image files because if there are 20 small images, you will be making 20 http requests to server to get these or requests to cdn which you could avoid. For large files, it makes sense to not store it in js file as js file will be very big and while getting it from server will take time and storage of browser also used. 

asset type => just give this value and build and see in src, it is using asset/resource. Take image file smaller than 8kb and try and see src will have long string and usng asset inline model. Now we can change this check size of 8kb to some other value using parser -> dataUrlCondition -> maxSize (See (5) webpack config for this)

assetSource => this also does not generate a file in output folder => See (6) => we created altText.txt file and imported inside addImage file and used it. Let's add another rule for text files in webpack config => You can build it and check it is working fine and also this altText thing is bundled within the javascript file.


