Integrating Node js and express into single page application 
-------------------------------------------------------------
Create server directory inside the src where we will create our express server file server.js and also added a npm script to run this server. See(20) for this => See server/server.js => see route '/' where we are telling that read the content of html file generated by html webpack plugin and send that content back => If we build this, it wont work because express in html file will see css and js file reference and it doesnt know how to get it => Now 'use' of express helps in this regard => we will make a path called '/static' just like we made route for '/' => 'use' keyword is different from route in a way that it serves directories => we can say that any request for file starting with '/static', you get the file from given directory by same name of file asked. 
Now in our html, jss file and css refreence url does not have static and express wom't take request inside static route => we have to add 'static' before their path => we can add static in public path itself. So that all other assets requests like images etc will also have static and express will pick those request and static route will serve it from dist directory which has images, css, js, fonts file etc

See we have added static in werbpack config prod

Integration Node.js and express with multiple page application
--------------------------------------------------------------
See (21) for this => only difference this time will be, we will have multiple routes and each route will serve diff pages for that route. Also static will remain same because, the html itself has the refrence to what css js it wants and dist have these files by the same name and current page will only request for css js it wants and will find it in dist and it will be served.

Integrating jquery in our app
-----------------------------
Very simple, just like lodash import it and start using it in js files. See (22) heading.js

Configuring EsLint 
------------------
Linters tell us about syntax erros, unused imports or code, deprecated functions, spacing and format conventions => See (23) 
First install the es-lint as 'npm install eslint --save-dev' 
Add a npm script to run eslint
We will create configuration file for this called '.eslintrc' and it is json file => we can include the rules in this file from: https://eslint.org/docs/rules/ => there are many of them and some have checks meaning they are very trivial and should be included and we can in shortcut apply them all as: 
"extends": "eslint:recommended" => but this checks are only for ES5 but we are using ES6 and even more => we can specify parserOptions and mention ecma script version. Also sourcetype is module meaning eslint can know about import and export of modules we are doing everywhere.

"parser": "babel-eslint", => this parser is needed because class members we used is not in ES6 as well and thus this parser will help it convert.
    "env": {
        "node": true, => inside src files, imports are resolved because of sourceType field being module but their is reference of require inside webpack config file and lint wont understand it => tell env is node so common things of node like require it can understand.
        "browser": true => now some of things like document.getElement etc are browser variables and node js dont have it and we assume when code will run in browser, it will have it => for eslint to understand that this is fine, we mention browser env and lint will understand. 
    },
    "rules": {
        "no-console": 0 => No we can add additonal rules like no console to be set off like here because otherwise we cant print logs as this is set tot true by defaut by es lint and log prints is not allowed.
    }
