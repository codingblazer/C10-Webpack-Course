Webpack plugin is a lib that adds functionality to the webpack itself. The laoders of diff type just loads the file and helps with bundling functionality of webpacl but with plugins we can add new types of functionalities like minifying the size of bundle, declare global constants, etc. Note that bable plugin we saw earlier is not webpack plugin but babbel plugin and this is different topic.

Minifying the bundle size
--------------------------
If we minify the bundle size, our websites will load faster and give better user experience. For this we use TERSER PLUGIN. We can install it from npm:
'npm install terser-webpack-plugin --save-dev'
and inside webpack config file import this plugin and give plugin object in config under plugins array section as shown in (x10) folder. In webpack5 we don't need to install this plugin as it comes out of the box with latest version of terser plugin.
Earlier webpack used to use UlglifyJsPlugin for this.

Extract CSS in separate bundles
-------------------------------
Now currently the css is bundled inside the bundle.js only using style tag but this is not production standard because this can make the bundle.js file size very big and thus we should have separate bundle for css files and this css should be used in bundle.js using link tag. This way we can make parallel requests for these 2 files intead of one long request => better user experience as fast loading.

See (11) => We have created another component heading and css for that as well. Also we have used that component inside index.js. Now see webpack config => We will install the plugin for this using npm: 'npm install mini-css-extract-plugin --save-dev' => once installed, import it inside the webpack file and add object of this plugin to plugins array in config and inside it we can pass name of the css file it will create. Also once this plugin will be integrated with webpack, we use loader exposed by this plugin => We no longer want our css loader to pass css to style loader since style loader will otherwise create style element and insert css in it => we will pass it to the MiniCssExtractPlugin.loader which will extract the css a separate file. We can do same for sass as well. 

Browser Caching
----------------
Now if we reload the page, the browser makes request to get your assets on every refresh and user has to wait everytime for the same page i.e. if user open page 1, go to page 2 and come back to page 1, the assets for page 1 are fetched again => browser can cache these assets and remember them by filename => If let say browser is making request for same file by name, it will not make request and use file from cache to show page 1 instantly. This is done by most of the browsers today automatically. But what if during this, you fixed a bug on page 1 and that bug wont be fetched => We can change the name of the file to be fetched everytime we make change and browser will be forced to download this file when on page 1. Now, we can't change filename everytime we make change and thus webpack helps in that:

https://medium.com/@codebyamir/a-web-developers-guide-to-browser-caching-cc41f3b73e7c => read how browser does caching. 

In webpack, instead of us changing the name of the file everytime we make change, we let webpack handle name change. We can ask webpack to append the md5 hash of the content of the file in filename => this way, if there is no change in your file, md5 hash of content will remaing same and filename will remain same and browser wont pull the file again but if there is change, md5 hash and name of file will change and browser will fetch that resource again => See (12) => we can just change name of the bundle js and css file as 'styles.[contenthash].css' and webpack will do it for us.


Clean content of dist before writing new build files
-----------------------------------------------------
First install the plugin => 'npm install clean-webpack-plugin --save-dev' and now import it using require in webpack config file => add the object of this plugin in plugins array and we are done. While instantiating this plugin object, we can send paramter object to it to tell delete from some other folder than dist as well like some other build tool files maybe => '**/*' means anything generated by webpack, delete files and delete subdirectoeries also recursively and this is plugin object's default parameter so we dont need to pass.
'path.join(process.cwd(), 'build/**/*')' => this is absolute path of diff folder than dist which again we want to clear recursively.

Generating HTML files automatically
------------------------------------
Now if we see our index.html file, it is still referencing the css and js files without the md5 hash in their names and our app wont work => We should find a way to populate the generated js and css file names in our html automatically. But rather a different approach is used by webpack plugin called HTMLWebpackPlugin => See (c14) => If we use this plugin, this plugin says that I will generate the html file and we can delete our html file index.html completely and let this plugin generate html for us as well and in that html file, add these md5 named generated js and css files. Now you may ask how is this possible since if we are not having even single html file of our own in main project, how will we add to add any html, how will we do it ? 
1. One way is to do it using Javascript => Your javascript code that this plugin will add in the html it will generate, that js can add elements to DOM of generated HTML file and we will see those things. And in current case, we are doing that only and thus things should work.
2. We can use handlebars which helps in templating and cutomize this generated html file as per our needs for diff html elements. (we will see this in next section).

Now we can delete our index.html since that will anyway be not used anywhere now. Next, we can install, import and add the object for this plugin in webpack config which you can see from package.json and webpack config of (14). 

Now though we didnt have any extra tags so far in our html, we had title and metedata but HTMLplugin will add title and metadata of its own and we can send this information as parameters to plugin object as shown in webpack config => if you build now, we should see generated html file and it will automatically pick all the js generated files by webpack during build and put them in script tag with src as:

 'publicPath/generatedJSFileName' => value of publicPath was dist/ in last section => 'dist/bundle.389f4fv349gf347.js' => but since html is now present in same dist folder, this wont work and thus change publicPath value to ''  and it will work now.  

 Similarly for css as well this html plugin when generating html file will find all css files generated by webpack during build and add them in link tag with src as 'publicPath/generatedFilename' = 'generatedFileName.css' for public path as '' and thus, since this is present in same folder, it should work as well. 

 Integration with Handlebars
 ----------------------------
There are lot of templating engines available like handlebars, underscorejs, park, etc.  

Now let's create a hbs template file as shown  in (15) inside src and inside this hbs file, its exactly like generated html file, just that some of the things are variablized using {{}}. Now we saw in last section that HTMLWebpackPlugin used to generate html file for us. Now we can ask html plugin to use this template while generating that generated html file and html webpack plugin will still add generated js and css into this generated html file (which is generated using the template) => the value of these template variables also we pass to html plugin as options. 

Now for webpack to understand these hbs files, we have added a rule for this hbs loader => When building project, webpack will come to hbs file, it will pass it through hbs loader and be able to load it in memory as recognizable thing and html plugin will then find this and populate values into this template and generate html file in this way and substitube css js generated files in it. 

More Webpack PLugins
---------------------
https://webpack.js.org/plugins/
